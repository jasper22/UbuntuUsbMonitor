--- socket.c	2011-04-07 10:09:44.000000000 +0800
+++ socket.c89.c	2011-04-07 10:09:49.000000000 +0800
@@ -377,7 +377,9 @@
 	new_sock->adv_mode	= 0;	/* advance with time */
 
 /* PGMCC */
+#pragma warning( disable : 4244 )
 	new_sock->acker_nla.ss_family = family;
+#pragma warning( default : 4244 )
 
 /* source-side */
 	pgm_mutex_init (&new_sock->source_mutex);
@@ -475,6 +477,7 @@
 /* Stevens: "SO_REUSEADDR has datatype int."
  */
 		pgm_trace (PGM_LOG_ROLE_NETWORK,_("Set socket sharing."));
+		{
 		const int v = 1;
 #ifndef SO_REUSEPORT
 		if (SOCKET_ERROR == setsockopt (new_sock->recv_sock, SOL_SOCKET, SO_REUSEADDR, (const char*)&v, sizeof(v)) ||
@@ -505,10 +508,12 @@
 			goto err_destroy;
 		}
 #endif
+		}
 
 /* request extra packet information to determine destination address on each packet */
 #ifndef CONFIG_TARGET_WINE
 		pgm_trace (PGM_LOG_ROLE_NETWORK,_("Request socket packet-info."));
+		{
 		const sa_family_t recv_family = new_sock->family;
 		if (SOCKET_ERROR == pgm_sockaddr_pktinfo (new_sock->recv_sock, recv_family, TRUE))
 		{
@@ -521,6 +526,7 @@
 				       pgm_sock_strerror_s (errbuf, sizeof (errbuf), save_errno));
 			goto err_destroy;
 		}
+		}
 #endif
 	}
 	else
@@ -777,8 +783,11 @@
 		{
 			int*restrict intervals = (int*restrict)optval;
 			*optlen = sock->spm_heartbeat_len;
-			for (unsigned i = 0; i < sock->spm_heartbeat_len; i++)
+			{
+			unsigned i;
+			for (i = 0; i < sock->spm_heartbeat_len; i++)
 				intervals[i] = sock->spm_heartbeat_interval[i + 1];
+			}
 		}
 		status = TRUE;
 		break;
@@ -1212,8 +1221,11 @@
 			sock->spm_heartbeat_len = optlen / sizeof (int);
 			sock->spm_heartbeat_interval = pgm_new (unsigned, sock->spm_heartbeat_len + 1);
 			sock->spm_heartbeat_interval[0] = 0;
-			for (unsigned i = 0; i < sock->spm_heartbeat_len; i++)
+			{
+			unsigned i;
+			for (i = 0; i < sock->spm_heartbeat_len; i++)
 				sock->spm_heartbeat_interval[i + 1] = ((const int*)optval)[i];
+			}
 		}
 		status = TRUE;
 		break;
@@ -1458,6 +1470,7 @@
 				break;
 			if (PGM_UNLIKELY(fecinfo->group_size > fecinfo->block_size))
 				break;
+			{
 			const uint8_t parity_packets = fecinfo->block_size - fecinfo->group_size;
 /* technically could re-send previous packets */
 			if (PGM_UNLIKELY(fecinfo->proactive_packets > parity_packets))
@@ -1474,6 +1487,7 @@
 			sock->rs_n			= fecinfo->block_size;
 			sock->rs_k			= fecinfo->group_size;
 			sock->rs_proactive_h		= fecinfo->proactive_packets;
+			}
 		}
 		status = TRUE;
 		break;
@@ -1596,7 +1610,9 @@
 		{
 			const struct group_req* gr = optval;
 /* verify not duplicate group/interface pairing */
-			for (unsigned i = 0; i < sock->recv_gsr_len; i++)
+			{
+			unsigned i;
+			for (i = 0; i < sock->recv_gsr_len; i++)
 			{
 				if (pgm_sockaddr_cmp ((const struct sockaddr*)&gr->gr_group, (struct sockaddr*)&sock->recv_gsr[i].gsr_group)  == 0 &&
 				    pgm_sockaddr_cmp ((const struct sockaddr*)&gr->gr_group, (struct sockaddr*)&sock->recv_gsr[i].gsr_source) == 0 &&
@@ -1615,6 +1631,7 @@
 					break;
 				}
 			}
+			}
 			if (PGM_UNLIKELY(sock->family != gr->gr_group.ss_family))
 				break;
 			sock->recv_gsr[sock->recv_gsr_len].gsr_interface = gr->gr_interface;
@@ -1646,7 +1663,9 @@
 			break;
 		{
 			const struct group_req* gr = optval;
-			for (unsigned i = 0; i < sock->recv_gsr_len;)
+			{
+			unsigned i;
+			for (i = 0; i < sock->recv_gsr_len;)
 			{
 				if ((pgm_sockaddr_cmp ((const struct sockaddr*)&gr->gr_group, (struct sockaddr*)&sock->recv_gsr[i].gsr_group) == 0) &&
 /* drop all matching receiver entries */
@@ -1663,6 +1682,7 @@
 				}
 				i++;
 			}
+			}
 			if (PGM_UNLIKELY(sock->family != gr->gr_group.ss_family))
 				break;
 			if (SOCKET_ERROR == pgm_sockaddr_leave_group (sock->recv_sock, sock->family, gr))
@@ -1721,7 +1741,9 @@
 		{
 			const struct group_source_req* gsr = optval;
 /* verify if existing group/interface pairing */
-			for (unsigned i = 0; i < sock->recv_gsr_len; i++)
+			{
+			unsigned i;
+			for (i = 0; i < sock->recv_gsr_len; i++)
 			{
 				if (pgm_sockaddr_cmp ((const struct sockaddr*)&gsr->gsr_group, (struct sockaddr*)&sock->recv_gsr[i].gsr_group) == 0 &&
 					(gsr->gsr_interface == sock->recv_gsr[i].gsr_interface ||
@@ -1746,6 +1768,7 @@
 					break;
 				}
 			}
+			}
 			if (PGM_UNLIKELY(sock->family != gsr->gsr_group.ss_family))
 				break;
 			if (PGM_UNLIKELY(sock->family != gsr->gsr_source.ss_family))
@@ -1768,7 +1791,9 @@
 		{
 			const struct group_source_req* gsr = optval;
 /* verify if existing group/interface pairing */
-			for (unsigned i = 0; i < sock->recv_gsr_len; i++)
+			{
+			unsigned i;
+			for (i = 0; i < sock->recv_gsr_len; i++)
 			{
 				if (pgm_sockaddr_cmp ((const struct sockaddr*)&gsr->gsr_group, (struct sockaddr*)&sock->recv_gsr[i].gsr_group)   == 0 &&
 				    pgm_sockaddr_cmp ((const struct sockaddr*)&gsr->gsr_source, (struct sockaddr*)&sock->recv_gsr[i].gsr_source) == 0 &&
@@ -1782,6 +1807,7 @@
 					}
 				}
 			}
+			}
 			if (PGM_UNLIKELY(sock->family != gsr->gsr_group.ss_family))
 				break;
 			if (PGM_UNLIKELY(sock->family != gsr->gsr_source.ss_family))
@@ -2085,17 +2111,19 @@
 
 /* determine IP header size for rate regulation engine & stats */
 	sock->iphdr_len = (AF_INET == sock->family) ? sizeof(struct pgm_ip) : sizeof(struct pgm_ip6_hdr);
-	pgm_trace (PGM_LOG_ROLE_NETWORK,"Assuming IP header size of %" PRIzu " bytes", sock->iphdr_len);
+	pgm_trace (PGM_LOG_ROLE_NETWORK,"Assuming IP header size of %" PRIzu " bytes", (unsigned long)sock->iphdr_len);
 
 	if (sock->udp_encap_ucast_port) {
 		const size_t udphdr_len = sizeof(struct pgm_udphdr);
-		pgm_trace (PGM_LOG_ROLE_NETWORK,"Assuming UDP header size of %" PRIzu " bytes", udphdr_len);
+		pgm_trace (PGM_LOG_ROLE_NETWORK,"Assuming UDP header size of %" PRIzu " bytes", (unsigned long)udphdr_len);
 		sock->iphdr_len += udphdr_len;
 	}
 
+	{
 	const sa_family_t pgmcc_family = sock->use_pgmcc ? sock->family : 0;
 	sock->max_tsdu = (uint16_t)(sock->max_tpdu - sock->iphdr_len - pgm_pkt_offset (FALSE, pgmcc_family));
 	sock->max_tsdu_fragment = (uint16_t)(sock->max_tpdu - sock->iphdr_len - pgm_pkt_offset (TRUE, pgmcc_family));
+	{
 	const unsigned max_fragments = sock->txw_sqns ? MIN( PGM_MAX_FRAGMENTS, sock->txw_sqns ) : PGM_MAX_FRAGMENTS;
 	sock->max_apdu = MIN( PGM_MAX_APDU, max_fragments * sock->max_tsdu_fragment );
 
@@ -2141,6 +2169,7 @@
  */
 /* TODO: different ports requires a new bound socket */
 
+	{
 	union {
 		struct sockaddr		sa;
 		struct sockaddr_in	s4;
@@ -2309,6 +2338,7 @@
 
 /* save send side address for broadcasting as source nla */
 	memcpy (&sock->send_addr, &send_addr, pgm_sockaddr_len ((struct sockaddr*)&send_addr));
+	}
 
 /* rx to nak processor notify channel */
 	if (sock->can_send_data)
@@ -2316,7 +2346,7 @@
 /* setup rate control */
 		if (sock->txw_max_rte > 0) {
 			pgm_trace (PGM_LOG_ROLE_RATE_CONTROL,_("Setting rate regulation to %" PRIzd " bytes per second."),
-					sock->txw_max_rte);
+					(long)sock->txw_max_rte);
 			pgm_rate_create (&sock->rate_control, sock->txw_max_rte, sock->iphdr_len, sock->max_tpdu);
 			sock->is_controlled_spm   = TRUE;	/* must always be set */
 		} else
@@ -2324,13 +2354,13 @@
 
 		if (sock->odata_max_rte > 0) {
 			pgm_trace (PGM_LOG_ROLE_RATE_CONTROL,_("Setting ODATA rate regulation to %" PRIzd " bytes per second."),
-					sock->odata_max_rte);
+					(long)sock->odata_max_rte);
 			pgm_rate_create (&sock->odata_rate_control, sock->odata_max_rte, sock->iphdr_len, sock->max_tpdu);
 			sock->is_controlled_odata = TRUE;
 		}
 		if (sock->rdata_max_rte > 0) {
 			pgm_trace (PGM_LOG_ROLE_RATE_CONTROL,_("Setting RDATA rate regulation to %" PRIzd " bytes per second."),
-					sock->rdata_max_rte);
+					(long)sock->rdata_max_rte);
 			pgm_rate_create (&sock->rdata_rate_control, sock->rdata_max_rte, sock->iphdr_len, sock->max_tpdu);
 			sock->is_controlled_rdata = TRUE;
 		}
@@ -2346,6 +2376,8 @@
 	pgm_rwlock_writer_unlock (&sock->lock);
 	pgm_debug ("PGM socket successfully bound.");
 	return TRUE;
+	}
+	}
 }
 
 bool
@@ -2359,11 +2391,14 @@
 #ifdef CONFIG_TARGET_WINE
 	pgm_return_val_if_fail (sock->recv_gsr_len == 1, FALSE);
 #endif
-	for (unsigned i = 0; i < sock->recv_gsr_len; i++)
+	{
+	unsigned i;
+	for (i = 0; i < sock->recv_gsr_len; i++)
 	{
 		pgm_return_val_if_fail (sock->recv_gsr[i].gsr_group.ss_family == sock->recv_gsr[0].gsr_group.ss_family, FALSE);
 		pgm_return_val_if_fail (sock->recv_gsr[i].gsr_group.ss_family == sock->recv_gsr[i].gsr_source.ss_family, FALSE);
 	}
+	}
 	pgm_return_val_if_fail (sock->send_gsr.gsr_group.ss_family == sock->recv_gsr[0].gsr_group.ss_family, FALSE);
 /* shutdown */
 	if (PGM_UNLIKELY(!pgm_rwlock_writer_trylock (&sock->lock)))
@@ -2472,6 +2507,7 @@
 		return SOCKET_ERROR;
 	}
 
+	{
 	const bool is_congested = (sock->use_pgmcc && sock->tokens < pgm_fp8 (1)) ? TRUE : FALSE;
 
 	if (readfds)
@@ -2500,6 +2536,7 @@
 #endif
 			}
 		}
+		{
 		const SOCKET pending_fd = pgm_notify_get_socket (&sock->pending_notify);
 		FD_SET(pending_fd, readfds);
 #ifndef _WIN32
@@ -2507,6 +2544,7 @@
 #else
 		fds++;
 #endif
+		}
 	}
 
 	if (sock->can_send_data && writefds && !is_congested)
@@ -2524,6 +2562,7 @@
 #else
 	return *n_fds + fds;
 #endif
+	}
 }
 
 #if defined(CONFIG_HAVE_POLL) || defined(CONFIG_HAVE_WSAPOLL)
